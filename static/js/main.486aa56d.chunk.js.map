{"version":3,"sources":["components/PointsForm/index.js","containers/Version/index.js","components/TopAppBar/index.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["PointsForm","_this","this","_this$props","props","_this$props$versionDa","versionData","name","fields","classes","reactn_default","a","createElement","Fragment","Card_default","className","card","Object","keys","map","field","key","concat","checkbox","FormControlLabel_default","control","Checkbox_default","id","checked","global","formData","onChange","e","setGlobal","objectSpread","defineProperty","target","color","label","text","TextField_default","type","margin","value","InputProps","endAdornment","InputAdornment_default","position","unitPoints","filter","includes","reduce","acc","Component","defaultProps","withStyles","minWidth","padding","Version","_this$props$version","version","versionFields","obj","components_PointsForm","TopAppBar","AppBar_default","Toolbar_default","IconButton_default","menuButton","aria-label","Menu_default","Typography_default","variant","grow","root","flexGrow","marginLeft","marginRight","routes","path","App","_this$global$formFiel","formFields","versions","components_TopAppBar","route","Link","to","Route","exact","render","Version_Version","Boolean","window","location","hostname","match","storeInit","formFieldSchema","forEach","count","ReactDOM","react_default","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.486aa56d.chunk.js","sourcesContent":["import React, { Component, setGlobal } from 'reactn';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Card from '@material-ui/core/Card';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n  card: {\r\n    minWidth: 275,\r\n    padding: '10px 30px',\r\n  },\r\n};\r\n\r\nclass PointsForm extends Component {\r\n  render() {\r\n    const {\r\n      versionData: { name, fields },\r\n      classes,\r\n    } = this.props;\r\n\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h1>{name}</h1>\r\n        <Card className={classes.card}>\r\n          {Object.keys(fields).map(field => (\r\n            <div key={`field-key-${field}`}>\r\n              {fields[field].checkbox ? (\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      id={field}\r\n                      checked={!!this.global.formData[field]}\r\n                      onChange={e => setGlobal({\r\n                        formData: { ...this.global.formData, [e.target.id]: e.target.checked },\r\n                      })\r\n                      }\r\n                      color=\"primary\"/>\r\n                  }\r\n                  label={fields[field].text}/>\r\n              ) : (\r\n                <TextField\r\n                  id={field}\r\n                  label={fields[field].text}\r\n                  type=\"number\"\r\n                  margin=\"dense\"\r\n                  value={this.global.formData[field]}\r\n                  onChange={e => setGlobal({\r\n                    formData: { ...this.global.formData, [e.target.id]: e.target.value },\r\n                  })\r\n                  }\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">x{fields[field].unitPoints}pts</InputAdornment>\r\n                    ),\r\n                  }}/>\r\n              )}\r\n            </div>\r\n          ))}\r\n          <div>\r\n            <h4>Points</h4>\r\n            <h1>\r\n              {Object.keys(this.global.formData)\r\n                .filter(field => Object.keys(fields).includes(field))\r\n                .reduce(\r\n                  (acc, field) => this.global.formData[field] * fields[field].unitPoints + acc,\r\n                  0,\r\n                )}\r\n            </h1>\r\n          </div>\r\n        </Card>\r\n        {/* {Object.keys(fields).map(field => (\r\n          <div key={`demo-${field}`}>\r\n            {fields[field].text}: <code>{this.global.formData[field]}</code>\r\n          </div>\r\n        ))} */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nPointsForm.defaultProps = {};\r\n\r\nPointsForm.propTypes = {\r\n  versionData: PropTypes.shape({}).isRequired,\r\n  classes: PropTypes.shape({}).isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PointsForm);\r\n","import React, { Component } from 'reactn';\r\nimport PropTypes from 'prop-types';\r\nimport PointsForm from '../../components/PointsForm';\r\n\r\nexport default class Version extends Component {\r\n  render() {\r\n    const { version: { name, versionFields }, fields } = this.props;\r\n\r\n    const filteredFields = Object.keys(fields)\r\n      .filter(key => versionFields.includes(key))\r\n      .reduce((obj, key) => {\r\n        const newObj = { ...obj, [key]: fields[key] };\r\n        return newObj;\r\n      }, {});\r\n\r\n    const versionData = {\r\n      name,\r\n      fields: filteredFields,\r\n    };\r\n    return <PointsForm versionData={versionData} />;\r\n  }\r\n}\r\n\r\nVersion.defaultProps = {\r\n  // versionFields: [],\r\n  fields: {},\r\n};\r\n\r\nVersion.propTypes = {\r\n  version: PropTypes.shape({}).isRequired,\r\n  // name: PropTypes.string.isRequired,\r\n  // versionFields: PropTypes.arrayOf(PropTypes.string),\r\n  fields: PropTypes.shape({}),\r\n};\r\n","import React, { Component } from 'reactn';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n};\r\n\r\nclass TopAppBar extends Component {\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n            Ticket To Ride Calculator\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  }\r\n}\r\n\r\nTopAppBar.propTypes = {\r\n  classes: PropTypes.shape({}).isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(TopAppBar);\r\n","import React, { Component } from 'reactn';\nimport { Route, Link } from 'react-router-dom';\nimport Version from './containers/Version';\nimport TopAppBar from './components/TopAppBar';\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    id: 'home',\n  },\n];\n\nclass App extends Component {\n  componentDidMount() {}\n\n  render() {\n    const { formFields: { versions, fields } } = this.global;\n    return (\n      <div>\n        <TopAppBar />\n        <nav>\n          <ul>\n            {routes.map(route => (\n              <li key={`route-link-${route.name}`}>\n                <Link to={route.path}>{route.name}</Link>\n              </li>\n            ))}\n            {Object.keys(versions).map(version => (\n              <li key={`route-link-${version}`}>\n                <Link to={versions[version].path}>{versions[version].name}</Link>\n              </li>\n            ))}\n          </ul>\n        </nav>\n        <Route path=\"/\" exact render={() => <div>Home</div>}/>\n        {Object.keys(versions).map(version => (\n          <Route\n            key={`route-${version}`}\n            path={versions[version].path}\n            exact\n            render={() => <Version version={versions[version]} fields={fields} />}/>\n        ))}\n        {/* {Object.keys()versions.map(version => (\n          <Route\n            key={`route-${version.key()}`}\n            path={route.path}\n            exact\n            render={() => (\n              <Version version={route.id} />\n            )}/>\n        ))} */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { setGlobal, addReducer } from 'reactn';\r\nimport formFieldSchema from '../formFieldSchema.json';\r\n\r\nconst storeInit = () => {\r\n\r\n  const formData = {};\r\n  Object.keys(formFieldSchema.fields).forEach(field => formData[field] = 0);\r\n\r\n  setGlobal({\r\n    count: 1,\r\n    formFields: formFieldSchema,\r\n    formData,\r\n  });\r\n};\r\n\r\nexport default storeInit;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nimport storeInit from './store';\nimport './index.css';\n\nstoreInit();\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}